services:
  backend:
    build: ./backend
    container_name: skinmatch-backend
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py createsuperuser --noinput || true &&
        python manage.py runserver 0.0.0.0:8000
      "
    env_file:
      - ./backend/.env
    environment:
      # Django settings
      - DJANGO_DEBUG=True
      - DJANGO_SUPERUSER_USERNAME=fongfufu
      - DJANGO_SUPERUSER_EMAIL=fongfufu@gmail.com
      - DJANGO_SUPERUSER_PASSWORD=pakorn1234

      # Database
      - DATABASE_URL=postgresql://skinuser:skinpass@db:5432/skinmatch

      # Allowed hosts and origins
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend
      - CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://frontend:3000
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000

      # JWT / Security
      - JWT_SECRET_KEY=change-me-in-prod
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TTL_MIN=15
      - JWT_REFRESH_TTL_DAYS=7

      # Timezone
      - TIME_ZONE=Asia/Bangkok

    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - path: ./backend
          target: /app
          action: sync
        - path: ./backend/requirements.txt
          action: rebuild
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      args:
        - BACKEND_URL=http://backend:8000
    container_name: skinmatch-frontend
    environment:
      - BACKEND_URL=http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    develop:
      watch:
        - path: ./frontend
          target: /app
          action: sync
        - path: ./frontend/package.json
          action: rebuild

  db:
    image: postgres:15
    container_name: skinmatch-db
    environment:
      POSTGRES_DB: ${DB_NAME:-skinmatch}
      POSTGRES_USER: ${DB_USER:-skinuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-skinpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: skinmatch-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  pgadmin_data:
